<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:throttling="http://www.mulesoft.org/schema/mule/throttling"
      xmlns:http-policy="http://www.mulesoft.org/schema/mule/http-policy"
      xmlns:http-transform="http://www.mulesoft.org/schema/mule/http-policy-transform"
      xmlns:authentication="http://www.mulesoft.org/schema/mule/authentication"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/http-policy http://www.mulesoft.org/schema/mule/http-policy/current/mule-http-policy.xsd
               http://www.mulesoft.org/schema/mule/throttling http://www.mulesoft.org/schema/mule/throttling/current/mule-throttling.xsd
               http://www.mulesoft.org/schema/mule/http-policy-transform http://www.mulesoft.org/schema/mule/http-policy-transform/current/mule-http-policy-transform.xsd
               http://www.mulesoft.org/schema/mule/authentication http://www.mulesoft.org/schema/mule/authentication/current/mule-authentication.xsd">

    <throttling:config name="rateLimitSlaConfig" clusterizable="{{clusterizable}}">
        <throttling:tier-provider>
            <throttling:validate-client-id/>
        </throttling:tier-provider>
    </throttling:config>

    <http-policy:proxy name="{{{policyId}}}-rate-limit-sla">
        <http-policy:source>
            <try>
                <set-variable value="#[%dw 2.0&#10;output application/json&#10;var authorizationHeader = {{{authorizationHeaderExpression}}}&#10;var splittedAuthorizationHeader = authorizationHeader splitBy ' '&#10;---&#10;{&#10;    authenticationType: lower(splittedAuthorizationHeader[0]),&#10;    token: splittedAuthorizationHeader[1]&#10;}]" variableName="authHeader"/>
                <choice>
                    <when expression="#[vars.authHeader.authenticationType == 'basic']">
                        <set-variable value="#[%dw 2.0&#10;import * from dw::core::Binaries&#10;output application/json&#10;var clientInfo = fromBase64(vars.authHeader.token) splitBy ':'&#10;---&#10;{&#10;    clientId: clientInfo[0],&#10;    clientSecret: clientInfo[1]&#10;}]" variableName="decodedAuthInfo"/>
                    </when>
                    <otherwise>
                    </otherwise>      
                </choice>
                
                <throttling:rate-limit id="{{{policyId}}}-rate-limit-sla" config-ref="rateLimitSlaConfig" target="throttlingResponse">
                    <throttling:tier-selector>
                        <throttling:client id="#[vars.decodedAuthInfo.clientId]" secret="#[vars.decodedAuthInfo.clientSecret]"/>
                    </throttling:tier-selector>
                </throttling:rate-limit>

                <http-policy:execute-next/>

                {{#if exposeHeaders}}
                <http-transform:add-response-headers>
                    <http-transform:headers>#[
                        {
                            'x-ratelimit-remaining': vars.throttlingResponse.availableQuota as String,
                            'x-ratelimit-limit': vars.throttlingResponse.maximumAllowedRequests as String,
                            'x-ratelimit-reset': vars.throttlingResponse.remainingFrame as String
                        }
                    ]</http-transform:headers>
                </http-transform:add-response-headers>
                {{/if}}

                <error-handler>
                    <on-error-continue type="THROTTLING:QUOTA_EXCEEDED" logException="false">
                        <authentication:set-authentication principal="#[error.exception.authentication.principal]"
                                                           credentials="#[error.exception.authentication.credentials]"
                                                           properties="#[error.exception.authentication.properties]"/>
                        {{#if isWsdlEndpoint}}
                        <choice>
                          <when expression="#[Soap::isGetWsdl(attributes.method, attributes.queryParams)]">
                            <http-transform:set-response statusCode="429">
                              <http-transform:body>#[
                                output application/json
                                ---
                                {"error": "$(error.description)"}
                                ]</http-transform:body>
                              <http-transform:headers>#[
                                {
                                {{#if exposeHeaders}}
                                'x-ratelimit-remaining': error.exception.availableQuota as String,
                                'x-ratelimit-limit': error.exception.maximumAllowedRequests as String,
                                'x-ratelimit-reset': error.exception.remainingFrame as String
                                {{/if}}
                                }
                                ]</http-transform:headers>
                            </http-transform:set-response>
                          </when>
                          <otherwise>
                            <try>
                                <set-variable variableName="error" value="#[error]"/>
                                <set-variable variableName="namespace" value="#[output text/plain --- Soap::getNamespace(payload)]"/>
                                <error-handler>
                                    <on-error-continue type="ANY">
                                        <set-variable variableName="namespace" value="#[output text/plain --- '']"/>
                                    </on-error-continue>
                                </error-handler>
                            </try>
                            <http-transform:set-response statusCode="#[Soap::clientErrorStatusCode(vars.namespace)]">
                              <http-transform:body>#[
                                output application/xml
                                ---
                                Soap::clientErrorMessage(vars.namespace, 'Too many requests', vars.error.description)
                                ]</http-transform:body>
                              <http-transform:headers>#[Soap::appendSoapHeaders(vars.namespace, {
                                {{#if exposeHeaders}}
                                'x-ratelimit-remaining': vars.error.exception.availableQuota as String,
                                'x-ratelimit-limit': vars.error.exception.maximumAllowedRequests as String,
                                'x-ratelimit-reset': vars.error.exception.remainingFrame as String
                                {{/if}}
                                })]</http-transform:headers>
                            </http-transform:set-response>
                          </otherwise>
                        </choice>
                        {{else}}
                        <http-transform:set-response statusCode="429">
                            <http-transform:body>#[
                                output application/json
                                ---
                                {"error": "$(error.description)"}
                                ]</http-transform:body>
                            <http-transform:headers>#[
                                {
                                    {{#if exposeHeaders}}
                                    'x-ratelimit-remaining': error.exception.availableQuota as String,
                                    'x-ratelimit-limit': error.exception.maximumAllowedRequests as String,
                                    'x-ratelimit-reset': error.exception.remainingFrame as String
                                    {{/if}}
                                }
                                ]</http-transform:headers>
                        </http-transform:set-response>
                        {{/if}}
                    </on-error-continue>
                    <on-error-continue type="THROTTLING:FORBIDDEN_CLIENT" logException="false">
                        {{#if isWsdlEndpoint}}
                        <choice>
                          <when expression="#[Soap::isGetWsdl(attributes.method, attributes.queryParams)]">
                            <http-transform:set-response statusCode="401">
                              <http-transform:body>#[
                                output application/json
                                ---
                                {"error": "$(error.description)"}
                                ]</http-transform:body>
                              <http-transform:headers>#[
                                    {'WWW-Authenticate': 'Client-ID-Enforcement'}
                                ]</http-transform:headers>
                            </http-transform:set-response>
                          </when>
                          <otherwise>
                            <try>
                                <set-variable variableName="description" value="#[output text/plain --- error.description]"/>
                                <set-variable variableName="namespace" value="#[output text/plain --- Soap::getNamespace(payload)]"/>
                                <error-handler>
                                    <on-error-continue type="ANY">
                                        <set-variable variableName="namespace" value="#[output text/plain --- '']"/>
                                    </on-error-continue>
                                </error-handler>
                            </try>
                            <http-transform:set-response statusCode="#[Soap::clientErrorStatusCode(vars.namespace)]">
                              <http-transform:body>#[
                                output application/xml
                                ---
                                Soap::clientErrorMessage(vars.namespace, 'Unauthorized', vars.description)
                                ]</http-transform:body>
                              <http-transform:headers>#[Soap::appendSoapHeaders(vars.namespace, {'WWW-Authenticate': 'Client-ID-Enforcement'})]</http-transform:headers>
                            </http-transform:set-response>
                          </otherwise>
                        </choice>
                        {{else}}
                        <http-transform:set-response statusCode="401">
                            <http-transform:body>#[
                                output application/json
                                ---
                                {"error": "$(error.description)"}
                                ]</http-transform:body>
                            <http-transform:headers>#[{'WWW-Authenticate': 'Client-ID-Enforcement'}]</http-transform:headers>
                        </http-transform:set-response>
                        {{/if}}
                    </on-error-continue>
                    <on-error-continue type="THROTTLING:ALGORITHM_CREATION_FAILURE" logException="false">
                        {{#if isWsdlEndpoint}}
                        <choice>
                            <when expression="#[Soap::isGetWsdl(attributes.method, attributes.queryParams)]">
                                <http-transform:set-response statusCode="503">
                                    <http-transform:body>#[
                                        output application/json
                                        ---
                                        {"error": "Cluster communication error"}
                                        ]</http-transform:body>
                                </http-transform:set-response>
                            </when>
                            <otherwise>
                                <try>
                                    <set-variable variableName="namespace" value="#[output text/plain --- Soap::getNamespace(payload)]"/>
                                    <error-handler>
                                        <on-error-continue type="ANY">
                                            <set-variable variableName="namespace" value="#[output text/plain --- '']"/>
                                        </on-error-continue>
                                    </error-handler>
                                </try>
                                <http-transform:set-response statusCode="#[Soap::serverErrorStatusCode(vars.namespace)]">
                                    <http-transform:body>#[
                                        output application/xml
                                        ---
                                        Soap::serverErrorMessage(vars.namespace, 'Service Unavailable', 'Cluster communication error')
                                        ]</http-transform:body>
                                    <http-transform:headers>#[Soap::appendSoapHeaders(vars.namespace)]</http-transform:headers>
                                </http-transform:set-response>
                            </otherwise>
                        </choice>
                        {{else}}
                        <http-transform:set-response statusCode="503">
                            <http-transform:body>#[
                                output application/json
                                ---
                                {"error": "Cluster communication error"}
                                ]</http-transform:body>
                        </http-transform:set-response>
                        {{/if}}
                    </on-error-continue>

                    {{#if exposeHeaders}}
                    <on-error-propagate>
                        <http-transform:add-response-headers>
                            <http-transform:headers>#[
                                {
                                    'x-ratelimit-remaining': vars.throttlingResponse.availableQuota as String,
                                    'x-ratelimit-limit': vars.throttlingResponse.maximumAllowedRequests as String,
                                    'x-ratelimit-reset': vars.throttlingResponse.remainingFrame as String
                                }
                            ]</http-transform:headers>
                        </http-transform:add-response-headers>
                    </on-error-propagate>
                    {{/if}}

                </error-handler>
            </try>
        </http-policy:source>
    </http-policy:proxy>
</mule>
